dir
dir()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
ls()
dev.off()
dir()
with(faithful, plot(erruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file="myplot.png")
dev.off()
ls()
str(x)
str(y)
summary(x)
summary(y)
plot(x)
plot(x,y)
class(x)
class(y)
f <- factor(1:1000)
plot(f,y)
plot(f)
plot(f,y)
plot(df)
hist(y)
rug(y)
hist(f)
hist(c)
hist(x)
rug(z)
rug(x)
coplot(x ~ y| f)
coplot(x ~ y| f)
qqnorm(x)
qqnorm(x)
qqnorm(y)
qqline(x)
qqline(y)
hist(x)
hist(y)
hist(x, breaks = 100)
hist(x, breaks = 50)
hist(x, probability = TRUE)
hist(x, breaks=25 probability = TRUE)
hist(x, breaks=25, probability = TRUE)
dotchart(x)
contour(x,y)
z <- rnorm(1000)
image(x,y,z)
points(x,y)
lines(x,y)
par()
oldpar <- par(no.readonly=TRUE)
oldpar
str(olpar)
str(oldpar)
class(oldpar)
?par
par(cex=2)
hist(x)
par(cex=4)
hist(x)
par(cex=2)
hist(x)
hist(x, nclass=10)
hist(x, nclass=100)
hist(x, breaks=100)
hist(x, breaks=1000)
hist(x, breaks=25)
par(cex=1)
hist(x, breaks=25)
mfcol(1,2)
par(mfcol(1,2))
par(mfcol=c(1,2))
hist(x), hist(y)
hist(x); hist(y)
par(mfro2=c(1,2))
par(mfrow=c(1,2))
hist(x); hist(y)
par(mfrow=c(2,1))
hist(x); hist(y)
dev()
help(devices)
?devices
??devices
dev.list()
quartz()
pdf()
data(cars)
with(cars, plot(speed, dist))
)
with(cars, plot(speed, dist))
library(datasets)
data(cars)
with(cars, plot(speed, dist))
cars
plot(cars)
plot(x)
dev.off()
plot(x)
par(oldpar)
plot(x)
with(cars, plot(speed, dist))
lm(speed ~ dist)
?lm
with(cars, lm(speed ~ dist))
library(lattice)state <- data.frame(state.x77, region = state.region)xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
library(lattice)
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality2 <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality2, xlab = "Month", ylab = "Ozone (ppb")
install.packages("lattice")
install.packages("grid")
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1)) -> p
p
p
set.seed(1234)par(mar = c(0, 0, 0, 0))x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
set.seed(1234)
par(mar = C0,0,0,0)
par(mar = cC0,0,0,0)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
x
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
y
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)dist(dataFrame)
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
dist(dataFrame) -> distxy
hClustering <- hclust(distxy)
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),                      hang = 0.1, ...) {    ## modifiction of plclust for plotting hclust objects *in colour*! Copyright    ## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector    ## of labels of the leaves of the tree lab.col: colour for the labels;    ## NA=default device foreground colour hang: as in hclust & plclust Side    ## effect: A display of hierarchical cluster with coloured leaf labels.    y <- rep(hclust$height, 2)    x <- as.numeric(hclust$merge)    y <- y[which(x < 0)]    x <- x[which(x < 0)]    x <- abs(x)    y <- y[order(x)]    x <- x[order(x)]    plot(hclust, labels = FALSE, hang = hang, ...)    text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],         col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)}
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),                      hang = 0.1, ...) {    ## modifiction of plclust for plotting hclust objects *in colour*! Copyright    ## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector    ## of labels of the leaves of the tree lab.col: colour for the labels;    ## NA=default device foreground colour hang: as in hclust & plclust Side    ## effect: A display of hierarchical cluster with coloured leaf labels.    y <- rep(hclust$height, 2)    x <- as.numeric(hclust$merge)    y <- y[which(x < 0)]    x <- x[which(x < 0)]    x <- abs(x)    y <- y[order(x)]    x <- x[order(x)]    plot(hclust, labels = FALSE, hang = hang, ...)    text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],         col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)}
dataFrame <- data.frame(x = x, y = y)distxy <- dist(dataFrame)hClustering <- hclust(distxy)myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)distxy <- dist(dataFrame)hClustering <- hclust(distxy)myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
x
y
dataFrame <- data.frame(x=x, y=y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each=4), lab.col = rep(1:3, each = 4))
mplclust(hClustering, lab = rep(1:3, each=4), lab.col = rep(1:3, each = 4))
?mplclust
??mplclust
?heatmap
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2)
x <- as.numeric(hclust$merge)
y <- y[which(x<0)]
x <- x[which(x<0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order], col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )
}
mplclust(hClustering, lab = rep(1:3, each=4), lab.col = rep(1:3, each = 4))
myplclust(hClustering, lab = rep(1:3, each=4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)set.seed(143)dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]heatmap(dataMatrix)
dataFrame <- data.frame(x = x, y = y)set.seed(143)dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]heatmap(dataMatrix)
dataFrame
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12)]
heatmap(dataMatrix)
class(dataMatrix)
class(x)
class(y)
str(dataFrame)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
set.seed(1234)par(mar = c(0, 0, 0, 0))x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)plot(x, y, col = "blue", pch = 19, cex = 2)text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2, 4))plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 4)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
rm(ls=list())
rm(list())
rm(list=ls())
library('Project.Template')
library('ProjectTemplate')
load.project()
setwd("/Volumes/DiskStation1/jhufton/MyDownload/Coursera/DataScientistsToolbox/ReproducableResearch/CourseProject1/RepData_PeerAssessment1")
library(plyr)
library(ggplot2)
activity.raw <- read.csv("./activity.csv", header=TRUE)
activity <- activity.raw
activity[is.na(activity)] <- 0
#Aggregate the steps for each interval in a day to a daily number of total steps for each day
daily.steps <- ddply(activity, .(date), summarize, daily_steps = sum(steps, na.rm = TRUE))
ggplot(daily.steps, aes(x=date, y=daily_steps)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 90, size = rel(0.75))) + ylab("Count of Daily Steps") + xlab("Date")
mean.steps <- ddply(activity, .(date), summarize, daily_steps = mean(steps, na.rm = TRUE))
mean.steps[is.na(mean.steps)] <- 0
names(mean.steps) <- c("Date", "MeanSteps")
mean.steps
median.steps <- ddply(activity, .(date), summarize, daily_steps = median(steps, na.rm = TRUE))
median.steps[is.na(median.steps)] <- 0
names(median.steps) <- c("Date", "MedianSteps")
median.steps
average.interval.steps <- ddply(activity, .(interval), summarize, avg_steps = mean(steps, na.rm = TRUE))
ggplot(average.interval.steps, aes(x=interval, y=avg_steps)) + geom_line(stat="identity") + theme(axis.text.x = element_text(angle = 90, size = rel(0.75))) + ylab("Average Steps by Daily Interval") + xlab("Interval")
average.interval.steps[average.interval.steps$avg_steps == max(average.interval.steps$avg_steps),]
nrow(activity.raw[is.na(activity.raw$steps), ])
average.interval.steps
average.interval.steps[ , 1]
for (i i n average.interval.steps[,1]) { i }
for (i in average.interval.steps[,1]) { i }
for (i in average.interval.steps[,1]) { print i }
for (i in average.interval.steps[,1]) { print(i) }
dates <- c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09", "2012-11-10", "2012-11-14", "2012-11-30")
dates
for (i in dates) {print(i)}
names(actvity)
names(activity)
names average.activity.steps
names(average.interval.steps)
for (d in dates) {
for (i in average.interval.steps[,1]) {
activity[activity$date == d & activity$interval == i, ] <-
average.interval.steps[average.interval.steps$interval == i, 2]
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
activity[activity$date == d & activity$interval == i, ] <- average.interval.steps[average.interval.steps$interval == i, 2]
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(d, i)
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(d)
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(d)
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(d) print(i)
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(d) print(i)
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(d)
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(d)
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(d)
print(i)
}
}
names(activity)
for (d in dates) {
for (i in average.interval.steps[,1]) {
activity[activity$date == d & activity$interval == i, 1] <- average.interval.steps[average.interval.steps$interval == i, 2]
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(average.interval.steps[average.interval.steps$interval == i, 2])
}
}
print("a","b")
?print
print(c("a","b"))
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(c(average.interval.steps[average.interval.steps$interval == i, 2]))
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(c(i, average.interval.steps[average.interval.steps$interval == i, 2]))
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(c(d, i, average.interval.steps[average.interval.steps$interval == i, 2]))
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(c(activity[activity$date == d & activity$interval == i, 1]))
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(c(d, i, activity[activity$date == d & activity$interval == i, 1]))
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(c(d, i, activity[activity$date == d & activity$interval == i, 1] <- 5))
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(c(d, i, activity[activity$date == d & activity$interval == i, activity$steps] <- 5))
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(c(d, i, (activity[activity$date == d & activity$interval == i, activity$steps] <- 5)))
}
}
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(c(d, i, (activity[activity$date == d & activity$interval == i, activity$steps] <- 5)))
}
}
names(mean.steps)
activity[activity$date == "2012-10-01"]
activity[activity$date == c("2012-10-01")]
activity[activity$date == "2012-10-01", ]
activity[activity$date == c("2012-10-01"), ]
activity[activity$date == c("2012-10-01"), ]
names(activity)
activity[activity$date == c("2012-10-01"), ]
class(activity[ ,2])
head(activity[ ,2])
?factor
activity[activity$date == factor("2012-10-01"), ]
?is.string
?is.numeric
?as.character
activity[as.character(activity$date) == "2012-10-01", ]
activity[as.date(activity$date) == as.date("2012-10-01"), ]
for (d in dates) {
for (i in average.interval.steps[,1]) {
print(c(d, i, average.interval.steps[average.interval.steps$interval == i, 2]))
}
}
names(activity)
str(activity)
activity[1:10, ]
head(activity)
activity.raw <- read.csv("./activity.csv", header=TRUE)
activity <- activity.raw
activity[is.na(activity)] <- 0
head(activity)
str(activity)
activity[1:10, 1]
activity[1:10, 2]
activity[1:10, 3]
activity[activity$date == "2012-10-01", ]
activity[activity$date == "2012-10-01" & activity$interval < 30, ]
activity[activity$date == "2012-10-01", 1]
activity[activity$date == "2012-10-01", 1] <- 10
activity[activity$date == "2012-10-01", 1]
activity[activity$date == "2012-10-01", 1] <- 0
names(average.interval.steps)
activity[activity$date == "2012-10-01", 1] <- average.interval.steps[ , 2]
activity[activity$date == "2012-10-01", 1]
activity[activity$date == "2012-10-01", 1] <- 0
for (d in dates) { activity[activity$date == d & activity$interval == 5]}
names(activity)
for (d in dates) { activity[activity$date == d & activity$interval == 5, ]}
dates
str(activity)
for (d in dates) { activity[activity$date == d, ]}
for (d in dates) { print(d)}
for (d in dates) { print(activity[activity$date == d & activity$interval == 5, ])}
for (d in dates) { activity[activity$date == d, 1] <- average.interval.steps[ ,2]}
activity[activity$date == "2012-10-01", 1]
activity[activity$date == "2012-10-08", 1]
activity[activity$date == "2012-11-01", 1]
activity[activity$date == "2012-11-02", 1]
activity[activity$date == "2012-11-04", 1]
activity[activity$date == "2012-11-09", 1]
activity[activity$date == "2012-11-10", 1]
activity[activity$date == "2012-11-11", 1]
activity[activity$date == "2012-11-14", 1]
activity[activity$date == "2012-11-15", 1]
activity[activity$date == "2012-11-30", 1]
clear
setwd("/Volumes/DiskStation1/jhufton/MyDownload/Coursera/DataScientistsToolbox/ReproducableResearch/CourseProject1/RepData_PeerAssessment1")
library(plyr)
library(ggplot2)
#Read in the data set, set NA values to 0
activity.raw <- read.csv("./activity.csv", header=TRUE)
activity <- activity.raw
activity[is.na(activity)] <- 0
#Aggregate the steps for each interval in a day to a daily number of total steps for each day
daily.steps <- ddply(activity, .(date), summarize, daily_steps = sum(steps, na.rm = TRUE))
#Plot the total
ggplot(daily.steps, aes(x=date, y=daily_steps)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 90, size = rel(0.75))) + ylab("Count of Daily Steps") + xlab("Date")
mean.steps <- ddply(activity, .(date), summarize, daily_steps = mean(steps, na.rm = TRUE))
mean.steps[is.na(mean.steps)] <- 0
names(mean.steps) <- c("Date", "MeanSteps")
mean.steps
median.steps <- ddply(activity, .(date), summarize, daily_steps = median(steps, na.rm = TRUE))
median.steps[is.na(median.steps)] <- 0
names(median.steps) <- c("Date", "MedianSteps")
median.steps
average.interval.steps <- ddply(activity, .(interval), summarize, avg_steps = mean(steps, na.rm = TRUE))
ggplot(average.interval.steps, aes(x=interval, y=avg_steps)) + geom_line(stat="identity") + theme(axis.text.x = element_text(angle = 90, size = rel(0.75))) + ylab("Average Steps by Daily Interval") + xlab("Interval")
average.interval.steps[average.interval.steps$avg_steps == max(average.interval.steps$avg_steps),]
nrow(activity.raw[is.na(activity.raw$steps), ])
dates <- c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09", "2012-11-10", "2012-11-14", "2012-11-30")
for (d in dates) {
activity[activity$date == d, 1] <- average.interval.steps[ ,2]}
}
dates <- c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09", "2012-11-10", "2012-11-14", "2012-11-30")
for (d in dates) {
activity[activity$date == d, 1] <- average.interval.steps[ ,2]
}
mean.steps <- ddply(activity, .(date), summarize, daily_steps = mean(steps, na.rm = TRUE))
mean.steps[is.na(mean.steps)] <- 0
names(mean.steps) <- c("Date", "MeanSteps")
mean.steps
median.steps <- ddply(activity, .(date), summarize, daily_steps = median(steps, na.rm = TRUE))
median.steps[is.na(median.steps)] <- 0
names(median.steps) <- c("Date", "MedianSteps")
median.steps
dates <- c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09", "2012-11-10", "2012-11-14", "2012-11-30")
for (d in dates) {
activity[activity$date == d, 1] <- average.interval.steps[ ,2]
}
setwd("/Volumes/DiskStation1/jhufton/MyDownload/Coursera/DataScientistsToolbox/ReproducableResearch/CourseProject1/RepData_PeerAssessment1")
library(plyr)
library(ggplot2)
#Read in the data set, set NA values to 0
activity.raw <- read.csv("./activity.csv", header=TRUE)
activity <- activity.raw
activity[is.na(activity)] <- 0
#Aggregate the steps for each interval in a day to a daily number of total steps for each day
daily.steps <- ddply(activity, .(date), summarize, daily_steps = sum(steps, na.rm = TRUE))
ggplot(daily.steps, aes(x=date, y=daily_steps)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 90, size = rel(0.75))) + ylab("Count of Daily Steps") + xlab("Date")
mean.steps <- ddply(activity, .(date), summarize, daily_steps = mean(steps, na.rm = TRUE))
mean.steps[is.na(mean.steps)] <- 0
names(mean.steps) <- c("Date", "MeanSteps")
mean.steps
median.steps <- ddply(activity, .(date), summarize, daily_steps = median(steps, na.rm = TRUE))
median.steps[is.na(median.steps)] <- 0
names(median.steps) <- c("Date", "MedianSteps")
median.steps
average.interval.steps <- ddply(activity, .(interval), summarize, avg_steps = mean(steps, na.rm = TRUE))
ggplot(average.interval.steps, aes(x=interval, y=avg_steps)) + geom_line(stat="identity") + theme(axis.text.x = element_text(angle = 90, size = rel(0.75))) + ylab("Average Steps by Daily Interval") + xlab("Interval")
average.interval.steps[average.interval.steps$avg_steps == max(average.interval.steps$avg_steps),]
nrow(activity.raw[is.na(activity.raw$steps), ])
dates <- c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09", "2012-11-10", "2012-11-14", "2012-11-30")
for (d in dates) {
activity[activity$date == d, 1] <- average.interval.steps[ ,2]
}
mean.steps <- ddply(activity, .(date), summarize, daily_steps = mean(steps, na.rm = TRUE))
mean.steps[is.na(mean.steps)] <- 0
names(mean.steps) <- c("Date", "MeanSteps")
mean.steps
median.steps <- ddply(activity, .(date), summarize, daily_steps = median(steps, na.rm = TRUE))
median.steps[is.na(median.steps)] <- 0
names(median.steps) <- c("Date", "MedianSteps")
median.steps
