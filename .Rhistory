cacheSolve(a)
help
where
where
message
where
?browser
?debug
isdebugged(cacheSolve)
cacheSolve(a)
clear
clr
clear()
library(datasets)
data(iris)
?iris
iris
iris[1]
iris[1]Species=='verginica'
iris$Species == 'verginica'
iris$Species == 'vrginica'
iris$Species == 'virginica'
iris[iris$Species == 'virginica', ]
iris[iris$Species == 'virginica', ][, 1]
mean(iris[iris$Species == 'virginica', ][, 1])
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
data(mtcars)
mtcars
?mtcars
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
class(sapply(mtcars, cyl, mean))
class(with(mtcars, tapply(mpg, cyl, mean)))
a <- with(mtcars, tapply(mpg, cyl, mean))
a
a(1)
a[1]
a[3]
a[3] - a[3]
a[3] - a[3]
a[3]
a[]
a[]4
?array
a[1,1]
a[4]
class(a[1])
26.66364 - 15.10000
debug(ls)
ls()
q
help
help
q
help
q
help
my_matrix <- matrix(c(1,2,4,6,8,9,11,13,5,67,78,39,100,149, 23,399), nrow=4, ncol=4)
ls(my_matrix)
my_matrix <- matrix(c(1,2,4,6,8,9,11,13,5,67,78,39,100,149, 23,399), nrow=4, ncol=4)
ls(my_matrix)
my_matrix
?ls
ls
ls()
debug(ls)
ls
ls()
help
nn
h
help
library(datasets)
data(mtcars)
mtcars
with(mtcars, tapply(mpg, cyl, mean))
?avg
?mean
mpg <- with(mtcars, tapply(mpg, cyl, mean))
mpg
mpg[4] -mpg[8]
mpg[1] - mpg[3]
mpg <- with(mtcars, tapply(hp, cyl, mean))
mpg
mpg[1] - mpg[3]
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
hp <- with(mtcars, tapply(hp, cyl, mean))
hp
hp[3] - hp[1]
data(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 1, mean)
mean(iris[iris$Species == 'virginica', ][, 1])
1:n-1
n <- 10
1:n-1
1:(n-1)
seq(-1, 5, by=.2) -> s3
s3
len(s3)
length(s3)
seq(-5, 5, by=.2) -> s3
s3
length(s3)
s4 <- seq(length=51, from=-.5, by=.2)
s4
s4 <- seq(length=51, from=-5, by=.2)
s4
s3
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
x
y <- x[!is.na(x)]
y
x[1:10]
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
str(x)
summary(x)
s4 <- seq(length=51, from=-5, by=.2)
str(s4)
summary(s4)
seq(-5, 5, by=.2) -> s3
sr(s3)
str(s3)
str(ls)
set.seed(20)
x <- rnorm(100)
e <- rmorm(100, 0, 2)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10)
system.time(y <- 0.5 + 2*x + e)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required at each station to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## Get the names of all files in the specified director to check for
## meeting the threshold condition
all_files <- list.files(path = directory, pattern = '*.csv', full.names=TRUE)
## For each of the files, check that there are enough complete measurements
## to qualify for inclusion in the correlation calculation based on the
## value of threshold provided in the input parameter.
## Add the file id (station id) for each file that qualifies to the
## vector of qualified files (staion ids).
id <- vector()
for (n in 1:length(all_files)) {
my_data <- read.csv(all_files[n])
number_cases <- nrow(my_data[complete.cases(my_data), ])
if (number_cases > threshold) {
id <- c(id, n)
}
}
## Use rbind() to combine the data sets from the files  meeting the threshold
## criterion
raw_data <- data.frame()
for (n in id) {
raw_data <- rbind(raw_data, read.csv(all_files[n]))
}
## Use complete.cases() to remove all observation rows containing an NA
## reading (i.e. those observations that are incomplete)
## This yeilds a data frame with all the complete readings that can be
## subsetted by staion id.
complete_cases <- complete.cases(raw_data)
my_data <- raw_data[complete_cases, ]
## Calculate the correlation for each qualifying station's data
## Add the result of the correlation calculation to a vector which
## contains the correlation calc for qualifying stations
my_results <- vector()
for (n in id) {
result <- cor(my_data[my_data$ID == n, ][ ,2], my_data[my_data$ID == n, ][ ,3], use = 'complete.obs')
my_results <- c(my_results, result)
}
## Round the results vector to five digits to match the
## example expected results in the problem definition
## round(my_results, digits = 5)
my_results
}
install.packages("RMySQL")
library(XML)
library(rhdf5)
install.packages("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = createFile("example.h5")
created = h5createFile("example.h5")
library(swirl)
ls()
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl
sq=wirl()
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version !is.na())
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, id_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size / 1000)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
?par
library(datasets)
hist(airquality$Ozone)
rug(airquality$Ozone)
x <- rnorm(1000)
hist(x)
rug(x)
x <- rnorm(1000)
hist(x)
rug(x)
y <- rnorm(1000)
plot(x,y)
with(faithful, plot(erruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
getwd()
dir
dir()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
ls()
dev.off()
dir()
with(faithful, plot(erruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file="myplot.png")
dev.off()
ls()
str(x)
str(y)
summary(x)
summary(y)
plot(x)
plot(x,y)
class(x)
class(y)
f <- factor(1:1000)
plot(f,y)
plot(f)
plot(f,y)
plot(df)
hist(y)
rug(y)
hist(f)
hist(c)
hist(x)
rug(z)
rug(x)
coplot(x ~ y| f)
coplot(x ~ y| f)
qqnorm(x)
qqnorm(x)
qqnorm(y)
qqline(x)
qqline(y)
hist(x)
hist(y)
hist(x, breaks = 100)
hist(x, breaks = 50)
hist(x, probability = TRUE)
hist(x, breaks=25 probability = TRUE)
hist(x, breaks=25, probability = TRUE)
dotchart(x)
contour(x,y)
z <- rnorm(1000)
image(x,y,z)
points(x,y)
lines(x,y)
par()
oldpar <- par(no.readonly=TRUE)
oldpar
str(olpar)
str(oldpar)
class(oldpar)
?par
par(cex=2)
hist(x)
par(cex=4)
hist(x)
par(cex=2)
hist(x)
hist(x, nclass=10)
hist(x, nclass=100)
hist(x, breaks=100)
hist(x, breaks=1000)
hist(x, breaks=25)
par(cex=1)
hist(x, breaks=25)
mfcol(1,2)
par(mfcol(1,2))
par(mfcol=c(1,2))
hist(x), hist(y)
hist(x); hist(y)
par(mfro2=c(1,2))
par(mfrow=c(1,2))
hist(x); hist(y)
par(mfrow=c(2,1))
hist(x); hist(y)
dev()
help(devices)
?devices
??devices
dev.list()
quartz()
pdf()
data(cars)
with(cars, plot(speed, dist))
)
with(cars, plot(speed, dist))
library(datasets)
data(cars)
with(cars, plot(speed, dist))
cars
plot(cars)
plot(x)
dev.off()
plot(x)
par(oldpar)
plot(x)
with(cars, plot(speed, dist))
lm(speed ~ dist)
?lm
with(cars, lm(speed ~ dist))
library(lattice)state <- data.frame(state.x77, region = state.region)xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
library(lattice)
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality2 <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality2, xlab = "Month", ylab = "Ozone (ppb")
install.packages("lattice")
install.packages("grid")
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1)) -> p
p
p
set.seed(1234)par(mar = c(0, 0, 0, 0))x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
set.seed(1234)
par(mar = C0,0,0,0)
par(mar = cC0,0,0,0)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
x
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
y
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)dist(dataFrame)
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
dist(dataFrame) -> distxy
hClustering <- hclust(distxy)
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),                      hang = 0.1, ...) {    ## modifiction of plclust for plotting hclust objects *in colour*! Copyright    ## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector    ## of labels of the leaves of the tree lab.col: colour for the labels;    ## NA=default device foreground colour hang: as in hclust & plclust Side    ## effect: A display of hierarchical cluster with coloured leaf labels.    y <- rep(hclust$height, 2)    x <- as.numeric(hclust$merge)    y <- y[which(x < 0)]    x <- x[which(x < 0)]    x <- abs(x)    y <- y[order(x)]    x <- x[order(x)]    plot(hclust, labels = FALSE, hang = hang, ...)    text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],         col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)}
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),                      hang = 0.1, ...) {    ## modifiction of plclust for plotting hclust objects *in colour*! Copyright    ## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector    ## of labels of the leaves of the tree lab.col: colour for the labels;    ## NA=default device foreground colour hang: as in hclust & plclust Side    ## effect: A display of hierarchical cluster with coloured leaf labels.    y <- rep(hclust$height, 2)    x <- as.numeric(hclust$merge)    y <- y[which(x < 0)]    x <- x[which(x < 0)]    x <- abs(x)    y <- y[order(x)]    x <- x[order(x)]    plot(hclust, labels = FALSE, hang = hang, ...)    text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],         col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)}
dataFrame <- data.frame(x = x, y = y)distxy <- dist(dataFrame)hClustering <- hclust(distxy)myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)distxy <- dist(dataFrame)hClustering <- hclust(distxy)myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
x
y
dataFrame <- data.frame(x=x, y=y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each=4), lab.col = rep(1:3, each = 4))
mplclust(hClustering, lab = rep(1:3, each=4), lab.col = rep(1:3, each = 4))
?mplclust
??mplclust
?heatmap
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2)
x <- as.numeric(hclust$merge)
y <- y[which(x<0)]
x <- x[which(x<0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order], col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )
}
mplclust(hClustering, lab = rep(1:3, each=4), lab.col = rep(1:3, each = 4))
myplclust(hClustering, lab = rep(1:3, each=4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)set.seed(143)dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]heatmap(dataMatrix)
dataFrame <- data.frame(x = x, y = y)set.seed(143)dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]heatmap(dataMatrix)
dataFrame
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12)]
heatmap(dataMatrix)
class(dataMatrix)
class(x)
class(y)
str(dataFrame)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
set.seed(1234)par(mar = c(0, 0, 0, 0))x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)plot(x, y, col = "blue", pch = 19, cex = 2)text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2, 4))plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 4)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
rm(ls=list())
rm(list())
rm(list=ls())
library('Project.Template')
library('ProjectTemplate')
load.project()
library(knitr)
knit2html
knit2html("PA1_template.Rmd")
setwd("/Volumes/DiskStation1/jhufton/MyDownload/Coursera/DataScientistsToolbox/ReproducableResearch/CourseProject1/RepData_PeerAssessment1")
library(plyr)
library(ggplot2)
library(lubridate)
library(xtable)
knit2html("PA1_template.Rmd")
